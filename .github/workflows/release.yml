name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: [self-hosted]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Building release for version: ${VERSION}"

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: nvbind ${{ steps.get_version.outputs.version }}
        body: |
          ## nvbind ${{ steps.get_version.outputs.version }}

          ### Features
          - Lightweight NVIDIA GPU binding for containers
          - Support for Docker, Podman, and Bolt runtimes
          - GPU state management and monitoring
          - Sub-microsecond latency tracking

          ### Installation
          Download the binary for your platform and make it executable:
          ```bash
          chmod +x nvbind-linux-x64
          sudo mv nvbind-linux-x64 /usr/local/bin/nvbind
          ```

          ### Verify Installation
          ```bash
          nvbind --version
          nvbind info
          ```
        draft: false
        prerelease: false

  build-release:
    name: Build Release Binary
    runs-on: [self-hosted]
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            binary_name: nvbind
            asset_name: nvbind-linux-x64
    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      run: |
        rustup update stable
        rustup default stable
        rustup target add ${{ matrix.target }}

    - name: Build release binary
      run: |
        cargo build --release --target ${{ matrix.target }} --all-features
        strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

    - name: Create tarball and prepare release assets
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
        mv ${{ matrix.asset_name }}.tar.gz ../../../
        cp ${{ matrix.binary_name }} ../../../${{ matrix.asset_name }}

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.create-release.outputs.version }}
        files: |
          ${{ matrix.asset_name }}.tar.gz
          ${{ matrix.asset_name }}

  test-release:
    name: Test Release Binary
    runs-on: [self-hosted]
    needs: build-release
    steps:
    - uses: actions/checkout@v4

    - name: Download release artifacts
      run: |
        VERSION="${{ needs.create-release.outputs.version }}"
        curl -L -o nvbind-linux-x64 \
          "https://github.com/${{ github.repository }}/releases/download/${VERSION}/nvbind-linux-x64"
        chmod +x nvbind-linux-x64

    - name: Test binary
      run: |
        echo "=== Version Check ==="
        ./nvbind-linux-x64 --version

        echo "=== GPU Info ==="
        ./nvbind-linux-x64 info || true

        echo "=== Config Check ==="
        ./nvbind-linux-x64 config --show || true