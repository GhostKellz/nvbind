name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Features
            - GPU passthrough for Docker and Podman containers
            - Support for NVIDIA Open GPU Kernel Modules (recommended)
            - Support for NVIDIA Proprietary and Nouveau drivers
            - TOML configuration management
            - Runtime validation and comprehensive error handling

            ## Installation
            ```sh
            # Quick install
            curl -sSL https://raw.githubusercontent.com/ghostkellz/nvbind/main/install.sh | sudo bash

            # Or download binary from this release
            ```

            See [README.md](https://github.com/ghostkellz/nvbind/blob/main/README.md) for full documentation.
          draft: false
          prerelease: false

  build_and_upload:
    name: Build and Upload
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: nvbind-x86_64-linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: nvbind-aarch64-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: nvbind-x86_64-windows.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            name: nvbind-x86_64-macos
          - os: macos-latest
            target: aarch64-apple-darwin
            name: nvbind-aarch64-macos

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/nvbind
          else
            strip target/${{ matrix.target }}/release/nvbind
          fi

      - name: Create archive
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/nvbind.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/nvbind ${{ matrix.name }}
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

  publish_crate:
    name: Publish to crates.io
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}