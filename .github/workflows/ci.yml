name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: [self-hosted]
    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      run: |
        rustup update stable
        rustup default stable
        rustup component add clippy rustfmt

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install security tools
      run: |
        cargo install --force cargo-audit || true

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy (security focused)
      run: cargo clippy --all-targets --all-features -- -D warnings -W clippy::suspicious

    - name: Security audit
      run: cargo audit

  # Build and Unit Tests
  build-test:
    name: Build & Test
    runs-on: [self-hosted]
    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      run: |
        rustup update stable
        rustup default stable

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: cargo build --release --verbose

    - name: Run unit tests
      run: cargo test --all-features --verbose

    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: nvbind-linux-x64
        path: target/release/nvbind

  # GPU Integration Tests
  gpu-integration:
    name: GPU Integration Tests
    runs-on: [self-hosted]
    needs: build-test
    steps:
    - uses: actions/checkout@v4

    - name: Download binary artifact
      uses: actions/download-artifact@v3
      with:
        name: nvbind-linux-x64
        path: ./

    - name: Make binary executable
      run: chmod +x nvbind

    - name: GPU Discovery Tests
      run: |
        echo "=== Testing GPU Discovery ==="
        ./nvbind info || true

    - name: Configuration Tests
      run: |
        echo "=== Testing Configuration ==="
        ./nvbind config --show || true

    - name: Device Access Tests
      run: |
        echo "=== Verifying GPU Device Access ==="
        ls -la /dev/nvidia* 2>/dev/null || echo "No NVIDIA devices found"

    - name: Container Runtime Tests
      run: |
        echo "=== Testing with Docker (if available) ==="
        if command -v docker &> /dev/null; then
          ./nvbind run --runtime docker ubuntu:22.04 nvidia-smi || true
        else
          echo "Docker not available - skipping"
        fi

  # Benchmarks (optional, runs on main branch)
  benchmarks:
    name: Performance Benchmarks
    runs-on: [self-hosted]
    if: github.ref == 'refs/heads/main'
    needs: build-test
    steps:
    - uses: actions/checkout@v4

    - name: Setup Rust
      run: |
        rustup update stable
        rustup default stable

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench